// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_file_repository is a generated GoMock package.
package mock_file_repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockfileReadRepository is a mock of fileReadRepository interface.
type MockfileReadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockfileReadRepositoryMockRecorder
}

// MockfileReadRepositoryMockRecorder is the mock recorder for MockfileReadRepository.
type MockfileReadRepositoryMockRecorder struct {
	mock *MockfileReadRepository
}

// NewMockfileReadRepository creates a new mock instance.
func NewMockfileReadRepository(ctrl *gomock.Controller) *MockfileReadRepository {
	mock := &MockfileReadRepository{ctrl: ctrl}
	mock.recorder = &MockfileReadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileReadRepository) EXPECT() *MockfileReadRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockfileReadRepository) Exists(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockfileReadRepositoryMockRecorder) Exists(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockfileReadRepository)(nil).Exists), name)
}

// Get mocks base method.
func (m *MockfileReadRepository) Get(name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockfileReadRepositoryMockRecorder) Get(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockfileReadRepository)(nil).Get), name)
}

// MockfileWriteRepository is a mock of fileWriteRepository interface.
type MockfileWriteRepository struct {
	ctrl     *gomock.Controller
	recorder *MockfileWriteRepositoryMockRecorder
}

// MockfileWriteRepositoryMockRecorder is the mock recorder for MockfileWriteRepository.
type MockfileWriteRepositoryMockRecorder struct {
	mock *MockfileWriteRepository
}

// NewMockfileWriteRepository creates a new mock instance.
func NewMockfileWriteRepository(ctrl *gomock.Controller) *MockfileWriteRepository {
	mock := &MockfileWriteRepository{ctrl: ctrl}
	mock.recorder = &MockfileWriteRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileWriteRepository) EXPECT() *MockfileWriteRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockfileWriteRepository) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockfileWriteRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockfileWriteRepository)(nil).Delete), arg0)
}

// Upload mocks base method.
func (m *MockfileWriteRepository) Upload(arg0 string, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockfileWriteRepositoryMockRecorder) Upload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockfileWriteRepository)(nil).Upload), arg0, arg1)
}
